/* Prestack kirchoff time migration (2-D/3-D). */
/*
Chinese Academy of Science, Guiting Chen 2019.01.010
*/


#include "su.h"
#include "segy.h"
#include "header.h"
#include "stdio.h"
#include "stdlib.h"
#include "math.h"
#include <string.h>
#include <time.h>
#include <cuda_runtime_api.h>
#include <cuda.h>

#define BlockSize1 	16// tile size in 1st-axis
#define BlockSize2 	16// tile size in 2nd-axis

			   /* Array of shot coordinates for input traces */

/**************************************************************
*
* Differentiation (backward second order) kernel
*
***************************************************************/

/*
t[gridDim.x*c_nt] - output vector of differentiated traces,
also input
*/
char *sdoc[] = {
	" 								",
	" 3D ktmig with high performance GPU acceleration	",
	"	Author: Guiting Chen, Chinese Academy of Science,2018.12.09	",
	"								",
	NULL };


void sf_check_gpu_error(const char *msg)
/*< check GPU errors >*/
{
	cudaError_t err = cudaGetLastError();
	if (cudaSuccess != err) {
		warn("Cuda error: %s: %s", msg, cudaGetErrorString(err));
		exit(0);
	}
}


/****************************************************************
*
* PSTM kernel with anti-aliasing after Lumley-Claerbout
*
****************************************************************/

/*
trace[int] - input trace
vrms[ont]  - RMS velocity vector at image location,
image[ont] - output image vector at the same location,
ox         - image coordinate in x,
oy         - image coordinate in y,
sx         - source coordinate in x,
sy         - source coordinate in y,
gx         - receiver coordinate in x,
gy         - receiver coordinate in y,
nt         - number of input samples,
ont        - number of output samples,
ot         - value of t0 in input,
dt         - sample rate of input,
oot        - value of t0 in output,
odt        - sample rate of output,
trm        - maximum AA filter length,
trf        - trace factor for AA filter
aa         - antialiasing (true/false)
*/
__global__ void cuda_kirchhoff_pstm(float *t, float *vrms, float *image, float *stk,
	float2 *sxy, float2 *gxy, float2 *ixy,
	float ooy, float dy,
	float vmm,
	float scales,
	int ntrace, int nt, int ncdp,
	float dis_aper, float angmax,float in_ang,
	float dt,
	int t_b,
	int aa)
	/*< PSTM kernel with anti-aliasing after Lumley-Claerbout >*/
{
	int i1 = blockIdx.x*blockDim.x + threadIdx.x ;
	int i2 = blockIdx.y*blockDim.y + threadIdx.y;
	int id = i1 + i2*nt;
	float v, inv,v2,inv2;
	float inv2trf, nf;
	int k;
	int imm;
	float j, scale, smp, so2, go2;
	float depth2,  ts, tg;
	float ang = 0;
	float dis_max;
	float tt1,tt2;
	float sx, sy, gx, gy, cx, cy, ox, oy, dis_ang,dis_tans,dis_tang;
	float factors = 0;
	int itrace=0;
	float temp,temp5,temp4,temp3,temp2,temp1,temp6,depth1,dis_so,dis_sg;
	float a_x,a_y,a_z, b_x,b_y,b_z,coss,tansg;
	for (itrace = 0; itrace < ntrace; itrace++)
	{
		if (i1 < nt  && i2 < ncdp && i1 >t_b )
		{


			sx = sxy[itrace].x;
			sy = sxy[itrace].y;
			gx = gxy[itrace].x;
			gy = gxy[itrace].y;
			cx = (sxy[itrace].x + gxy[itrace].x) / 2;
			cy = (sxy[itrace].y + gxy[itrace].y) / 2;
			ox = ixy[i2].x;
			oy = ixy[i2].y;
			imm=(int)((cy-ooy)/dy);
			v = vrms[imm*nt+i1]*scales;
			//v=vrms[id]*scales;
			v2=vrms[id];
			inv2=1.0f/v2;
			inv = 1.0f / v;
			depth2 = powf(0.5f*v*(i1*dt), 2.0f); depth1 = 0.5f*v*(i1*dt);
			dis_max = tan((angmax + 10) / 180 * PI)*v*(i1*dt) / 2;
			dis_ang = sqrtf((ox - cx)* (ox - cx) + (oy - cy)*(oy - cy));	
			dis_sg=sqrtf(     (sx - gx)* (sx - gx) + (sy - gy)*(sy - gy)                          );
			dis_so = sqrtf((sx - cx)* (sx - cx) + (sy - cy)*(sy - cy));
			so2 = (sx - ox)*(sx - ox) + (sy - oy)*(sy - oy);
			go2 = (gx - ox)*(gx - ox) + (gy - oy)*(gy - oy);
			dis_tans=sqrtf(so2);
			dis_tang=sqrtf(go2);

			a_x=sx-ox;
			a_y=sy-oy;
			a_z=-0.5f/1*(vrms[i1])*scales*(i1*dt);

			b_x=gx-ox;
			b_y=gy-oy;
			b_z=a_z;
//
		        coss=180/PI*acos(    (a_x*b_x+a_y*b_y+a_z*b_z)   /    (     sqrtf(a_x*a_x+a_y*a_y +a_z*a_z)*sqrtf(b_x*b_x+b_y*b_y +b_z*b_z)    )     );

//&& coss< cos( in_ang/90*PI )   && dis_tans/depth1<sin(in_ang/180*PI) && dis_tang/depth1<sin(in_ang/180*PI) && coss< in_ang*2    180/PI*acos  && coss< in_ang*2   && atan(dis_so/depth1)*180/PI<in_ang     && dis_tans/depth1<tan(in_ang/180*PI) && dis_tang/depth1<tan(in_ang/180*PI)  && dis_ang < dis_aper  && dis_tans/depth1<tan(in_ang/180*PI) && dis_tang/depth1<tan(in_ang/180*PI) && tansg<2*in_ang
 
			
			//ts=2*sqrtf(dis_so + depth2)*inv;
			//j = (ts) / dt;
				tansg=180/PI*(atan(dis_tang/depth1)+atan(dis_tans/depth1));
			if(dis_tang>=dis_sg) tansg=180/PI*(atan(dis_tang/depth1)-atan(dis_tans/depth1));
			if(dis_tans>=dis_sg) tansg=180/PI*(atan(dis_tans/depth1)-atan(dis_tang/depth1));
			
			//if(ox>sx &&ox<gx)
			//if(j >= 4.f && j < nt-4){
			//t[(int)(j)+itrace*nt]=0;
			//t[(int)(j)+1+itrace*nt]=0; }
			if (dis_ang < dis_max && dis_ang < dis_aper   && coss< 70*2   && dis_tans/depth1<tan(in_ang/180*PI) && dis_tang/depth1<tan(in_ang/180*PI) )
			{
				ts = sqrtf(so2 + depth2)*inv;
				tg = sqrtf(go2 + depth2)*inv;
				ang = 180.0 / 3.1415926535*fabs(acos((i1*dt) / (ts + tg)));
				j = (ts + tg) / dt; 
				factors = 0.0;
				if (ang <= 60) factors = 1.0;
				else { factors = 0; }
				if (j >= 4.f && j < nt-4)
				{
					//INTSMP(t, i) ((1.f - i + (float)((int)i))*t[(int)i] + (i - (float)((int)i))*t[(int)(i)+1])
					//image[k] += INTSMP(trace, j)*factors;
					//if(  dis_so/(j*dt/2*v) <sin(in_ang*PI/180)  )
{
// anti-aliasing
j=j-3;
temp1=((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);
j=j+1;
temp2=((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);
j=j+1;
temp3=((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);
j=j+1;
temp = ((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);
j=j+1;
temp4=((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);
j=j+1;
//temp5=((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);
j=j+1;
//temp6=((1.f - j + (float)((int)j))*t[(int)j + itrace*nt] + (j - (float)((int)j))*t[(int)(j)+1 + itrace*nt]);


tt1=0.5f*(3.0f*temp - 4.0f*temp3 + temp2) / dt;
tt2=0.5f*(3.0f*temp3 - 4.0f*temp2 + temp1) / dt;
temp4=0.5f*(3.0f*temp4 - 4.0f*temp + temp3) / dt;
temp=tt1;
temp3=tt2;


					//image[id]=atan(dis_so/depth1)*180/PI;
					 image[id] += (temp3+temp+temp4)*factors/3;
					//image[id] += (temp2+temp3+temp+temp4+temp5)/5;
					//image[id] += (temp1+temp2+temp3+temp+temp4+temp5+temp6)*factors/7;
					//image[id] = ox;
					if (temp != 0.0) stk[id] += 1.0;
		}// i1 and i2
	}//  itrace
}


void stacking(float *imag, float *stk, float *img2, int osize)
{

	int i, j, k;
	for (i = 0; i<osize; i++)
		if (stk[i]>30)  img2[i] = imag[i] / stk[i];

}

///////////////////////////////////////////////KTMIG
segy intrace; 	/* input traces */
segy vol;	/* migrated output traces */
int main(int argc, char* argv[]) {
	/* Counters */
	int i = 0, j = 0, k = 0, l, n, iit;

	/* Input data parameters */
	int nt, nx, ny = 1, nix = 1, nin = 1, osize, ntr, btr, dbtr;
	float ot, dt;

	/* Apperture parameters */
	int ix, iy, minix, miniy, maxix, maxiy;
	/* Apperture half-width in each direction */
	int apx, apy;
	/* Apperture first indices in x,y and number of x,y locations */
	int aox, aoy, anx, any;

	/* Image(output) space parameters */
	int ont, onx, ony;
	float oot, oox, ooy;
	float odt, odx, ody;

	/* Antialias filter parameters */
	int maxtri;
	float trfact, trm;

	/* Aperture corners */
	int el_cx1, el_cx2, el_cy1, el_cy2;
	int blk_y;
	float el_x, el_y;

	/* Input traces, output image, velocity */
	float *t, *img, *v, *v_slice, *stk, *img2;
	/* Aperture indices */
	int *ap;
	/* Coordinates: shot, receiver, and midpoint */

	int star_line, nline, ncdp, all_line, id, index_trace, t_b, t_e;
	int oidx, nntt;
	float dis_aper;
	float in_ang;
	int y_b, y_e;
	float angmax = 0;
	float scales=0;
	float ox, oy, sx, sy, gx, gy;
	char *vrmsfile, *imgfile;
	//sf_file data, image, vrms, sxsy, gxgy, cxcy;
	FILE *fp_vfile = NULL;
	FILE *fp_image = NULL;
	initargs(argc, argv);
	requestdoc(0);
	if (!getparfloat("scales", &scales)) err("can't get scales");
	if (!getparfloat("in_ang", &in_ang)) err("can't get in_ang");
	if (!getparfloat("aper", &dis_aper)) err("can't get aper in aper");
	if (!getparint("t_b", &t_b)) err("can't get t_b");
	if (!getparint("nntt", &nntt)) err("can't get nntt");
	if (!getparint("group", &nx)) err("can't get group");
	if (!getparint("star_line", &star_line)) err("can't get star_line");
	if (!getparint("id", &id)) err("can't get id");
	if (!getparint("all_line", &all_line)) err("can't get all_line");
	if (!getparint("ncdp", &ncdp)) err("can't get ncdp");
	if (!getparint("nline", &nline)) err("can't get nline");
	if (!getparfloat("dx", &odx)) err("can't get odx in celocity");
	if (!getparfloat("angmax", &angmax)) err("can't get angmax");
	if (!getparfloat("dy", &ody)) err("can't get dy in velocity");
	if (!getparfloat("x_beg", &oox)) err("can't get x_beg in celocity");
	if (!getparfloat("y_beg", &ooy)) err("can't get y_beg in velocity");
	if (!getparstring("vfile", &vrmsfile)) { warn("error infile vrm"); }
	if (!getparstring("image", &imgfile)) { warn("error outfile image"); }
	if ((fp_vfile = fopen(vrmsfile, "r")) == NULL)
		err("cannot open infile=%s\n", vrmsfile);
	if ((fp_image = fopen(imgfile, "wb")) == NULL)
		err("cannot open infile=%s\n", imgfile);

	cudaSetDevice(id);// initialize device, default device=0;
	sf_check_gpu_error("Failed to initialize device!");

	int  aa, diff;
	int iix=0;
	float *d_t, *d_v, *d_img, *d_stk;
	float2  *sxy, *gxy, *ixy;
	float2 *d_sxy, *d_gxy, *d_ixy;


	int devcnt = 0;
	if (!getparint("aa", &aa)) aa = 1;
	if (!getparint("diff", &diff)) diff = 1;
	gettr(&intrace);
	nt = intrace.ns;
	ny = 1;
	nin = 1;
	nix = 1;
	ntr = nx;
	dt = 0.004;
	ot = 0.0;
	ont = nt;
	onx = nline;
	ony = ncdp;
	osize = nt*ncdp;
	odt = dt;
	oot = 0.;
	warn("Image size: %d x %d x %d   nt=%d   dt=%f", ont, onx, ony, nt, dt);
	btr = ntr;
	warn("Setting number of traces per block to %d", btr);
	if (!getparint("maxtri", &maxtri)) maxtri = 13;
	if (!getparfloat("trfact", &trfact)) trfact = 4.0*(0.5*(odx + ody) / dt);
	/* Initiate output */
	v_slice = (float*)malloc(ncdp*ont * sizeof(float));
	v = (float*)malloc(osize * sizeof(float));
	img = (float*)malloc(osize * sizeof(float));
	img2 = (float*)malloc(osize * sizeof(float));
	stk = (float*)malloc(osize * sizeof(float));
	memset(stk, 0, sizeof(float)*osize);
	memset(img2, 0, sizeof(float)*osize);
	fseek(fp_vfile, ncdp*nt*star_line, SEEK_SET);
      //  for(i=0;i<=star_line;i++)
	{
		
		fread(v,sizeof(float),ncdp*nt,fp_vfile);

	}
	int si,sj,len;
	if (!getparint("len", &len)) err("can't get len");
	float *pen,tempv=0,sk,vmm;
	for(i=0;i<ncdp;i++)
		for(j=0;j<nt;j++)
			{  
			       sk=0.0;
                               for(si=-len; si<len;si++)
				{
				   if(j+si>=0 && j+si<nt)
					{
                                          sj=j+si;
					  tempv+=v[i*nt+sj];	
					  sk+=1.0;		  
					}				
				}
				v_slice[i*nt+j]=tempv/sk;
				tempv=0;
			}
	for(i=0;i<nt;i++)
	{
          tempv+=v_slice[i];
 
	}	
	vmm=tempv/nt;
	memcpy(v,v_slice,sizeof(float)*nt*ncdp);
	//warn("Setting velocity");
	t = (float*)malloc(btr*nt * sizeof(float));
	sxy = (float2*)malloc(btr * sizeof(float2));
	gxy = (float2*)malloc(btr * sizeof(float2));
	ixy = (float2*)malloc(ncdp * sizeof(float2));
	for (i = 0; i < ncdp; i++)
	{
		ixy[i].x = star_line*odx + oox;
		ixy[i].y = i*ody + ooy;
	}

	cudaMalloc(&d_stk, osize * sizeof(float));
	cudaMalloc(&d_img, osize * sizeof(float));
	cudaMalloc(&d_v, osize * sizeof(float));
	cudaMalloc(&d_t, btr * nt * sizeof(float));
	cudaMalloc(&d_sxy, btr * sizeof(float2));
	cudaMalloc(&d_gxy, btr * sizeof(float2));
	cudaMalloc(&d_ixy, ncdp * sizeof(float2));


	cudaMemset(d_stk, 0, osize * sizeof(float));
	cudaMemset(d_img, 0,  osize * sizeof(float));
	cudaMemset(d_v, 0, osize * sizeof(float));
	cudaMemset(d_t, 0, btr * nt * sizeof(float));
	cudaMemset(d_sxy, 0, btr * sizeof(float2));
	cudaMemset(d_gxy, 0, btr * sizeof(float2));
	cudaMemset(d_ixy, 0, ncdp * sizeof(float2));

	cudaMemcpy(d_stk, stk, ncdp * sizeof(float), cudaMemcpyHostToDevice);
	cudaMemcpy(d_ixy, ixy, ncdp * sizeof(float2), cudaMemcpyHostToDevice);
	cudaMemcpy(d_v, v, ncdp *nt* sizeof(float), cudaMemcpyHostToDevice);

	sf_check_gpu_error("Failed to initialize device memory!");
	/* Loop over input traces */
	dim3 dimg, dimb;
	dimg.x = (nt + BlockSize1 - 1) / BlockSize1;
	dimg.y = (ncdp + BlockSize2 - 1) / BlockSize2;
	dimb.x = BlockSize1;
	dimb.y = BlockSize2;


    int itrace=0;
	int imm;	
	FILE *fp_v;
	fp_v = fopen("norm.bin", "wb");
	/* Migration */
	i = 0;
	do
	{
	    memcpy(&t[i*nt],intrace.data,sizeof(float)*nt);
		sxy[i].x = 1.0*intrace.sx;
		sxy[i].y = 1.0*intrace.sy;
		gxy[i].x = 1.0*intrace.gx;
		gxy[i].y = 1.0*intrace.gy;
		imm=(int)(((sxy[i].x+gxy[i].x)/2-oox)/odx);
		i++;
		if (i == btr)
		{
			cudaMemcpy(d_t, t, nt*btr * sizeof(float), cudaMemcpyHostToDevice);
			cudaMemcpy(d_sxy, sxy, btr * sizeof(float2), cudaMemcpyHostToDevice);
			cudaMemcpy(d_gxy, gxy, btr * sizeof(float2), cudaMemcpyHostToDevice);
			
			cuda_kirchhoff_pstm<<<dimg,dimb>>>(d_t, d_v, d_img, d_stk,
				d_sxy, d_gxy, d_ixy,
				ooy, ody,
				vmm,
				scales,
				btr, nt, ncdp,
				dis_aper, angmax,in_ang,
				dt,
				t_b,
				aa);
			sf_check_gpu_error("Failed to PSTM_kernel!");

			warn("Migration cdpt %d  \n ", intrace.cdpt );
			cudaMemcpy(img, d_img, ncdp *nt * sizeof(float), cudaMemcpyDeviceToHost);
			fseek(fp_image, 0L, SEEK_SET);
			fwrite(img, sizeof(float), osize, fp_image);
			itrace=itrace+i;
			i = 0;
		}
	} while (gettr(&intrace));
	fwrite(img2, sizeof(float), osize, fp_v);
	exit(0);
}
